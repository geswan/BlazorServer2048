@using Fluxor.Blazor.Web.Components
@using Store.DashboardUseCase
@using Microsoft.AspNetCore.Components
@using BlazorServer2048.Store

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<div class="container-fluid">
    <h2>Score @DashboardState!.Value.Total @ResultText </h2>

    <div class="row">
        <div class="col-sm-12">
            <div class="row m-2">
                <div class="col-sm-6">
                    <div class="label">
                        <label for="btnStopStart">@RunStopText</label>
                    </div>
                </div>
            </div>
            <div class="row m-2">
                <div class="col-sm-6 .">
                    <div class="labelTarget">
                        <button type="button" class="btn btn-primary" id="btnStopStart" @onclick="ToggleRunStop">@ToggleText</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [Inject]
    private IState<DashboardState>? DashboardState { get; set; }
    [Inject]
    public IDispatcher? Dispatcher { get; set; }

    [CascadingParameter]
    public IModalService? Modal { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //need to resubscribe every time OnInitialized is called
        SubscribeToAction<GameOverAction>(async (action) => await OnGameOver(action.Message));
    }

    private async Task OnGameOver(string msg)
    {

        var options = new ModalOptions { Position = ModalPosition.TopRight };
        var modalComponent = Modal?.Show<ModalComponent>(msg, options);
        if (modalComponent == null) return;
        ModalResult result = await modalComponent.Result;
        if (result.Confirmed)
        {
            ToggleRunStop();
        }
    }
    private void ToggleRunStop()
    {
        var action = new ToggleRunStopAction();
        Dispatcher!.Dispatch(action);
    }
    public string ToggleText { get => DashboardState!.Value.IsRunning ? "Running" : "Stopped"; }

    public string RunStopText { get => DashboardState!.Value.IsRunning ? "Click to Stop:" : "Click to Restart:"; }

    public string ResultText
    {
        get
        {
            if (DashboardState!.Value.IsRunning) return string.Empty;
            return DashboardState!.Value.IsGameWon ? "You Win!" : "Game Over!";

        }
    }
  
}

}





